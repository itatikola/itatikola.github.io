<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-05-16T18:40:30-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Indira Tatikola</title><subtitle>Hi! I’m Indira and I’m studying computer science at the Georgia Institute of Technology.  My areas of interest are computer vision, graphics, and machine learning and their applications in social media. Feel free to reach out through any platform! </subtitle><entry><title type="html">Project #4: Spotify Wrapped</title><link href="http://localhost:4000/2024/04/15/Project-4-SpotifyWrapped.html" rel="alternate" type="text/html" title="Project #4: Spotify Wrapped" /><published>2024-04-15T00:00:00-04:00</published><updated>2024-04-15T00:00:00-04:00</updated><id>http://localhost:4000/2024/04/15/Project-#4-SpotifyWrapped</id><content type="html" xml:base="http://localhost:4000/2024/04/15/Project-4-SpotifyWrapped.html">&lt;p&gt;     In my Objects &amp;amp; Design course this semester, we were challenged with creating a mimic Spotify Wrapped application. Our team of seven spent 2 months following an Agile Scrum to build this application on Android Studio. &lt;!--more--&gt; If I’m being honest, when I heard about this assignment I was a bit scared. It was definitely the largest group and longest-term project I had ever worked on. Knowing that there had to be timely deliverables and that all of our individual components relied on each other was daunting, especially when working with strangers. However, this experience was extremely rewarding and I am truly proud of the final product.&lt;/p&gt;

&lt;p&gt;     When you enter the application, you are prompted to log in. Our app uses Firebase to host a database of user account information. You can create a new account, delete that account, and go to your profile to view your past wrapped summaries. Once you’ve logged in to our app, you’ll be redirected to log in to Spotify itself. From there, we get an access token to your account that we can use as our Spotify API key.&lt;/p&gt;

&lt;p&gt;     Once you’ve logged in, you can begin viewing your wrapped summaries. All information is taken from a short term, recent time period. Your wrapped summaries from today may be much different from what they are next week. The first page is a summary of your top playlists, the second is of your top genres, and the final is of your top songs and artists. The final screen displays a succinct graphic encompassing all of this information which you can download to your device.&lt;/p&gt;

&lt;p&gt;     You’ll notice that you are prompted to play a game. The game we created is a word search made of songs from the playlist of your choosing. You can even choose a difficulty level on a scale of 1 to 3!&lt;/p&gt;

&lt;p&gt;     Building this entire application in Java on Android Studio was annoying, but me and the two other developers on my team rose to the challenge. Since running your app on Android Studio is incredibly time consuming and battery expensive, I learned a lot about making small, but significant changes to code. My test and debug skills grew exponentially, and for that I am thankful. Some aspects of our code that I’m proud of is the API Helper we created to easily extract information from the Spotify API and return it in a usable manner. This modularity allowed other members of the team who weren’t familiar with using APIs to still contribute to the code and make a substantial impact. In the same vein, I learned how to handle merge conflicts on Git and I will never start working on a collaborative project without pulling from the remote repo ever again.&lt;/p&gt;

&lt;p&gt;     Finally, one aspect of this project I enjoyed was the creativity I got to express on the design front. It’s got a little of my signature rounded buttons and such, but I did try to mimic the actual bold colors and fonts of the 2023 Spotify Wrapped and I think I was pretty successful! The project is up on my GitHub and I encourage anyone to take a look at the demo. Feel free to use our API Helper for your own applications, too.&lt;/p&gt;</content><author><name></name></author><summary type="html">     In my Objects &amp;amp; Design course this semester, we were challenged with creating a mimic Spotify Wrapped application. Our team of seven spent 2 months following an Agile Scrum to build this application on Android Studio.</summary></entry><entry><title type="html">Project #3: CodeGradr</title><link href="http://localhost:4000/2024/02/15/Project-3-CodeGradr-copy.html" rel="alternate" type="text/html" title="Project #3: CodeGradr" /><published>2024-02-15T00:00:00-05:00</published><updated>2024-02-15T00:00:00-05:00</updated><id>http://localhost:4000/2024/02/15/Project-#3-CodeGradr%20copy</id><content type="html" xml:base="http://localhost:4000/2024/02/15/Project-3-CodeGradr-copy.html">&lt;p&gt;     This year, I accomplished the major milestone of actually getting a project out of a Hackathon and not giving up after the free Moe’s on night two. At Hacklytics 2024, my team and I created CodeGradr - a web application using generative AI to provide feedback for routine, structured coding assignments. &lt;!--more--&gt; As a TA, spending four to five hours a week grading coding assignments that often have the same handful of bugs between them was becoming unbearable. However, for a student, it is really important to receive feedback and a thorough explanation of where you went wrong. Generative AI is the perfect outlet for automating this simple tasks that require mere pattern recognition.&lt;/p&gt;

&lt;p&gt;     The way CodeGradr works is you upload the files containing 1) your test cases (e.g. JUnits) or even just a rubric for the assignment, and 2) the correct implementation. Then, click the “Generate Feedback” button where you will copy and paste a student’s code and receive a Chat-GPT generated response. The framework comes from the fact that in large classes, every student is being judged on the same criteria. So you do the hard part of uploading your correct work first, then you can easily copy and paste student code as you go through each assignment. Chat-GPT is prompted to analyze the test cases or rubric portions the student has failed and compare against the correct implementation to provide a succinct explanation of what their mistakes were.&lt;/p&gt;

&lt;p&gt;     We used an AWS EC2 instance to host the website and Flask as the web framework. Experimenting with the OpenAI API was definitely a treat! Unfortunately, we had the very bad luck of the API being down the weekend of the hackathon, so we were unable to finish and submit by the time projects were due. However, since we were excited about the project we quickly worked to finish the app as soon as it was up and running again. This was my first time developing an application entirely in Python, and I really enjoyed it. Finally, I created the entire user interface with simple CSS/HTML, and I think you’ll find I have a very distinct style!&lt;/p&gt;

&lt;p&gt;     Though we weren’t able to submit, I still had a great time at Hacklytics and it definitely motivated me to create more small, but useful projects like Codegradr.&lt;/p&gt;</content><author><name></name></author><summary type="html">     This year, I accomplished the major milestone of actually getting a project out of a Hackathon and not giving up after the free Moe’s on night two. At Hacklytics 2024, my team and I created CodeGradr - a web application using generative AI to provide feedback for routine, structured coding assignments.</summary></entry><entry><title type="html">Project #2: Recitation Slides</title><link href="http://localhost:4000/2024/01/15/Project-2-Recitation-Slides-copy.html" rel="alternate" type="text/html" title="Project #2: Recitation Slides" /><published>2024-01-15T00:00:00-05:00</published><updated>2024-01-15T00:00:00-05:00</updated><id>http://localhost:4000/2024/01/15/Project-#2-Recitation-Slides%20copy</id><content type="html" xml:base="http://localhost:4000/2024/01/15/Project-2-Recitation-Slides-copy.html">&lt;p&gt;     One of my favorite experiences in college so far has been being a teaching assistant for the data structures and algorithms course at my school. This past semester, I spent many hours making 15 comprehensive slide decks for our weekly, TA-led recitation sections. &lt;!--more--&gt; This course is the largest course offered at Georgia Tech, and it runs heavily on the 50-60 TAs who work very hard to provide top-notch resources for students. Our team has created csvistool.com and endless exam preparation material. It’s an inspiring group to be a part of, and so I was motivated to contribute something as well.&lt;/p&gt;

&lt;p&gt;     For years, the TAs have wondered why our course specifically has poor recitation enthusiasm among students. Many of our sections are cancelled or merged as the semester progresses because of low attendance, and this doesn’t seem to happen as often in other courses. I noticed that our recitations lacked uniformity and quality assurance. In other courses, I’ve found a lot of my learning comes from the lab or studio associated with the course, led by TAs. Specifically, the slides are incredibly helpful as students are really good at simplifying content for their peers. I wanted to create the same system for our course.&lt;/p&gt;

&lt;p&gt;     This semester, I set out to create a comprehensive set of slides for each week’s recitation. Every slide covers two or three major concepts in our class (either a data structure or an algorithm) and uses the same format to explain each one. In the case of data structures, I try to first introduce the ADT the structure will implement, the motivation for why we would use this structure, and then the inner workings of three major operations: search, add, and remove. For algorithms, I first explain the problem goal or purpose of an algorithm, do a pseudocode analysis, and then perform a large diagramming example. After this, we talk about time complexity. Finally, the slides end with a couple coding questions for students to try on their own.&lt;/p&gt;

&lt;p&gt;     These slides are made with the idea that students may reference them later without the help of a TA. Therefore, explanations and all the content must be present on the slides, but in a non-overwhelming and aesthetically pleasing (though this is just my preference) way. I think the common explanation structure helps organize the overwhelming amount of content for students so they “know what they have to know.” In addition, I’ve peppered in prompting questions throughout the slides to increase interactivity.&lt;/p&gt;

&lt;p&gt;     The final collection is available on my public GitHub for computer science students anywhere to benefit from. Please reach out if you see errors! If they help even one person out there score an extra point on their exam, my time was well-spent :).&lt;/p&gt;</content><author><name></name></author><summary type="html">     One of my favorite experiences in college so far has been being a teaching assistant for the data structures and algorithms course at my school. This past semester, I spent many hours making 15 comprehensive slide decks for our weekly, TA-led recitation sections.</summary></entry><entry><title type="html">Project #1: Personal Website</title><link href="http://localhost:4000/2023/12/15/Project-1-Personal-Site.html" rel="alternate" type="text/html" title="Project #1: Personal Website" /><published>2023-12-15T00:00:00-05:00</published><updated>2023-12-15T00:00:00-05:00</updated><id>http://localhost:4000/2023/12/15/Project-#1-Personal-Site</id><content type="html" xml:base="http://localhost:4000/2023/12/15/Project-1-Personal-Site.html">&lt;p&gt;    In November, I felt an urge to put my programming capabilities to the test and start developing. As I delved into other people’s personal projects to look for inspiration and guidance, I felt overwhelmed with where to start.  &lt;!--more--&gt; I would get discouraged by how advanced other people were, how many various platforms and languages they knew, and the amount of time many of my peers had already spent building their skills. It just felt like it was impossible to catch up - but everyone has to start somewhere. Instead of wallowing, I needed to create something that would encourage me to continue creating. I thought, “Everyone seems to have a personal site where they put their projects, which means that 1) I can create a site, and 2) it’ll look pretty dumb if there are no projects on it, so I’ll be forced to keep going.”&lt;/p&gt;

&lt;p&gt;    And here’s the final product - welcome to my site! Here’s a little bit about it. I’m hosting the site on Github Pages and used Github’s static site builder, Jekyll, for the general HTML format. I chose Jekyll because it’s meant to be used specifically for blog-style websites. I copied over the default CSS theme, “minima”, into my local folders and made edits from there to personalize the design. I tried to mimic the Apple iOS theme a bit with rounded edges, modern fonts, and a simple color scheme (with a pop of color!). I also got a custom domain name from CloudFlare.&lt;/p&gt;

&lt;p&gt;    I’m using Google Analytics to keep track of site data by copying a site tag onto each HTML page. From my analytics dashboard, I can view page-by-page insights on how many people are viewing the site.&lt;/p&gt;

&lt;p&gt;    Pretty simple start, can’t wait to keep experimenting :)&lt;/p&gt;</content><author><name></name></author><summary type="html">    In November, I felt an urge to put my programming capabilities to the test and start developing. As I delved into other people’s personal projects to look for inspiration and guidance, I felt overwhelmed with where to start.</summary></entry></feed>